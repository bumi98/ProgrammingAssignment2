##This fuction can create a matrix that caches its inverse
makeCacheMatrix <- function(x=matrix()){
  inv<-NULL
  set<-fuction(y){
    x<<-y
    inv<<-NULL
  }
  get<-fuction() x
  setInverse<-fuction(inverse) inv<<-inverse
  getInverse<- fuction() inv
  list(set=set, get=get, setInverse=setInverse, getInverse=getInverse)
}
##This function computes inverse of the matrix
##If inverse is already calculated then it retrieves the inverse from the cache
cacheSolve <- function(x, ...){
  inv<-x$getInverse()
  if (!is.null(inv)) {
    message("getting cached data")
    return(inv)
  }
  mat<-x$get()
  inv<-solve(mat, ...)
  x$setInverse(inv)
  inv
}
